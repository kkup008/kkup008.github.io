<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>get_started_3dsctf_2016</title>
    <link href="/2024/05/07/get-started-3dsctf-2016/"/>
    <url>/2024/05/07/get-started-3dsctf-2016/</url>
    
    <content type="html"><![CDATA[<p>这是buu的一道pwn题，当然，写下这篇文章的目的是为了说一些细节，今天我看到了一篇文章上面写下了对这道题的看法，稍有不足之处我略微补充</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><p>其实首先我们看到这道题的方法应该是绕过if判断<br><img src="/.io//QQ%E5%9B%BE%E7%89%8720240507210532.png" alt="alt text"><br>这里我们看到有两行jnz这是判断语句，<br>我们需要的是跳转到之后的mov传参的过程，<br>注意这个传参传的是fopen的参数，<br>跳转到mov即可绕过判断获得flag</p><h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><p>我写文章的目的主要是为了说明覆盖，我在网上看到了好多说的不可以覆盖，原因主要是因为参数a1和a2在ret的下面，因此出现了覆盖的一些细节问题，下面我详细说说<br>1.显而易见，我们可以看到参数的位置关系以及距离<br><img src="/.io//QQ%E5%9B%BE%E7%89%8720240507211023.png" alt="alt text"><br>然后首先这道题我最初是覆盖做的，而后来我发现直接覆盖的话并没有得到想要的结果，原因就是因为中间有了一个ret，那么这个覆盖到底能不能实现判断正确从而获取flag呢？对此，我想说说我的理解，首先这个ret的位置是在[ebp+0]的位置，这意味着如果我们直接跳转到函数地址之后再加上参数，会出现这样一种情况<br>a1  对应   [ebp+0]<br>a2  对应   [ebp+4]<br>而实际上，对于这个实际情况来看，显然a1和a2的位置是出现在偏后一个字长的距离，那也就意味着这里似乎我们需要加一个“假”的地址来欺骗系统，以至于达到我们的目的—覆盖参数</p><p>所以我们构造如下的payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ payload = p32(get_flag_addr) + p32(空白) + p32(real_a1) + p32(real_a2)<br></code></pre></td></tr></table></figure><p>那么现在是不是可以打通了呢？<br>通过调试，很遗憾，还是失败了，那么回过头来看，为什么会失败呢？<br>我们通过对payload的检查，发现有问题的地方只有我们填充的空白，似乎这个空白看起来很碍眼，所以思考了一下，似乎应该给他一个合法的地址让他去跳转，<br>于是我重新修改了payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ payload = p32(get_flag_addr) + p32(puts_addr) + p32(real_a1) + p32(real_a2)<br></code></pre></td></tr></table></figure><p>本以为万无一失了，可谁知结果依然不尽人意，这个时候我冷静思考了片刻，查阅了一下资料，没有得到flag说明函数并没有执行成功（当然，覆盖的是没有问题的）<br>于是我想起来当初说的如果你pwn了一个系统，希望系统在你pwn之后不会遇到程序崩溃的痕迹，可以在最后加上一个退出的exit（）<br>突发奇想</p><p>于是我在ida里面找到了exit（）的函数<br>我把它的地址传到了空白处</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ payload = p32(get_flag_addr) + p32(exit_addr) + p32(real_a1) + p32(real_a2)<br></code></pre></td></tr></table></figure><p>功夫不负有心人！终于成功退出并且得到了flag</p><p>代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ payload = b<span class="hljs-string">&#x27;a&#x27;</span>*56 +p32(0x80489A0)+ p32(0x804E6A0) + p32(814536271) + p32(425138641)<br></code></pre></td></tr></table></figure><p>当然我们成功的获得了flag<br><img src="/.io//QQ%E5%9B%BE%E7%89%8720240507212841.png" alt="alt text"></p><h3 id="泄露libc信息"><a href="#泄露libc信息" class="headerlink" title="泄露libc信息"></a>泄露libc信息</h3><p>这个具体就不说了，大家自行探索</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>简单说点什么吧</title>
    <link href="/2024/04/22/hello-world/"/>
    <url>/2024/04/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Pwn is really a very great thing</p><h2 id="介绍一下我是如何接触到pwn的"><a href="#介绍一下我是如何接触到pwn的" class="headerlink" title="介绍一下我是如何接触到pwn的"></a>介绍一下我是如何接触到pwn的</h2><h3 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h3><p>我第一次接触到网络安全的时候对他的印象只是懵懵懂懂的，我不知道他是要做什么的，我只知道pwn看起来很厉害，就像网上的黑客那样。这种技术真的很令人痴迷，而我也是沉沦其中。从那一天之后，我开始努力学习技术，学习栈溢出，学习堆，各种各样的ROP，以及绕过保护，算了算到现在已经有两三个月了，到现在为止，我越发觉得自己水平的不够用，只能去buu去多刷。在这一路上，我遇到了好多高手，校内的师哥和校外的比赛大神，从最开始的萌新一点都不会，到现在的入门，可以说是真的很困难，好在我坚持了下来。</p><h2 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h2><p>对于一些想要学习pwn或者说别的方向的人，我知道网络安全的学习真的特别难，但是我希望我们都可以坚持下去，对pwn来说，需要的基础知识真的太多太多，我们不妨慢下来一点点的去攻破。对于如何继续加深学习，对我而言，我认为找一些适合自己的比赛去打可能是一个最优解。当然不论如何，最重要的是我们能够坚持下来，并保持我们的热爱，这样我们学习的过程才会充满斗志，一路披荆斩棘。<br>pwn在中文里叫做二进制漏洞挖掘，在CTF中普遍的形式如下：<br>出题人会给你一个二进制程序，还会再给你一个环境&#x2F;靶机，你需要在本地找到这个程序的漏洞，然后运用各<br>种攻击手段向远程发送攻击代码，从而打通远程的靶机，得到它的控制权，并且找到flag:grinning:<br>是不是听起来就有一点大伙理解中的黑客气息了？<br>但是先别急，这个方向与计算机底层的知识联系密切，需要你对底层的知识有丰富深刻的了解，研究的东西很<br>难很复杂，门槛是有点高的，例如：<br>                   c语言中某些函数的机制漏洞<br>                   对于某些保护机制的绕过方法<br>                   对于代码执行流的恶意攻击手段<br>然后再别急，如果你很坚定的想要成为一个带嘿客，喜欢挖漏洞，喜欢破解软件想要写点诸如游戏外挂这一类<br>的什么东西，或者想要做CTF队伍里面珍稀且很有排面的pwn爷爷，或者我们正经一点，坚定不移的走安全的<br>这条路，那我更希望你可以耐心看下去，并且对它产生兴趣，来了解一下这个神奇的领域<br>在讲pwn的各种东西之前，我想说一些自己学过来的一些废话：<br>我个人觉得，对于0基础pwn这个方向的入门门槛非常高，非常硬核，如果你不知道什么<br>是Linux，不知道什么是shell，再甚至如果你对c语言的掌握还没有那么好的话，很可能你要花出相比于其他方<br>向更多的时间去入门（对，仅仅是入门）pwn:cry:<br>听起来很劝退对吧，但是万事开头难，无论你决定学什么东西什么方向都一定要带着你的觉悟，如果遇到一个<br>问题就想着放弃或者搁置的话在这里一定不会学到什么知识的<br>在pwn的路上你可能会遇到各种与你之前的学习生活非常割裂的各种名词，或者都不用说在这条路上，接下来<br>的指北里估计就有不少你看不懂的名词，勤用搜索引擎，多用搜索引擎然后狠狠地钻研就一定会得到你的答案<br>劝退过后我也说一些稍微有点安慰意义的话，大伙大可以把学pwn的过程当做是打怪升级的过程，当你把零零<br>散散的一些东西学明白且做出了这个方向的一道题之后一定会感受到那种突然通畅了一样的快感，且时常会伴<br>随着“这东西现在看上去这么简单为什么我当时学花了好多时间”的感觉，这都是学习的珍贵成果<br>同时也要记住多实践多动手，在硬核的领域里面实机操作一定是第一准则，比如一个漏洞的攻击方法和具体实<br>现你去思考的话一定是不如去自己动手动态调试一遍的，拿我举个例子，直到今年3月份我的动态调试水平都<br>是非常拉垮的，但是进入堆的领域之后感觉到上手动调非常重要于是现在逐渐掌握了基本的动调方法并且也确<br>实意识到了动调对于后续学习的重要性且开始应用于实战，所以很建议大伙从头开始就一直动手调试实践而不<br>是一直啃书本看帖子思考</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>为什么要说学pwn的门槛高呢，因为基础知识如下：<br>首先一定要学会c语言，书推荐《c primer plus》<br>汇编语言，我的方法是从王爽的汇编语言-&gt;《深入理解计算机系统》的第三章<br>搭建一个可以做pwn题的linux环境同时学一些基础的linux知识<br>可以使用wsl&#x2F;vmware<br>系统建议选择Ubuntu，22.04即可<br>要学会用python和pwntools写一些简单的脚本，称之为exp<br>还会涉及到一些工具的使用诸如ida pwndbg 等等等等<br>同时很建议学会使用markdown编辑器，这种语言适合于记一些学习过程以及心得<br>实际上你在真正学习的时候，既不可能有一个确定的学习目标（或者说任务，再解释一下就是说不可能学到卡<br>到某一个确定的位置），又需要逐渐的多方向扩展学习，(其实好像对于每个方向都是如此，这可能也是CTF的<br>魅力所在），与此同时：<br>千万不要真的去看完所有知识点再来做题，请注重实践和理论的分配<br>pwn中最简单的题可能只需要上述知识中的一项，拿接下来的moe题目里面来说，很多题都是入门难度，不<br>需要你真的看懂很多c&#x2F;薄纱python&#x2F;看懂很多汇编&#x2F;完全熟悉linux<br>我们的基础题可能只需要：<br>熟悉几个简单的linux指令<br>会写一个python的简单的交互脚本<br>弄懂最简单的栈溢出原理<br>所以也不要被这么多的学习项目吓到或者劝退，moe的这些题会以一种梯度的形式来帮助你了解我上述的这<br>些东西，真的如同“打怪升级”，所以请保持你的激情和觉悟加油做下去<br>在这里推荐一些资源：<br>ctfwiki，一个很全面的教程资料网站，当你学会一些基础知识之后可以看看ctfwikipwn分区<br>好用的题库网站，供刷题巩固知识点：<br>buuctf，题量非常全<br>nssctf，里面有最近的各大比赛的原题，网站题库里附有一些师傅的wp（writeup即题解）方便随<br>时参照解题<br>攻防世界<br>pwnable.tw （似乎有点进阶）<br>等等</p><h2 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h2><p>说完了“是什么”和“该做什么”，接下来先适应性的谈谈“怎么做”<br>首先我重申一个核心观点就是，学什么方向什么东西都需要觉悟和坚持，学pwn也是如此，这一定是一个长<br>期的过程，同时可能你也会被其中的一两个知识点卡住持续短则几天长则一月，还是上面的话，如果你轻言放<br>弃无论我告诉你怎么做都帮不到你<br>而且可能也会和前面说的话会有一些重复，见谅，可能是我希望在这里更多解释一下前面的话，也可能是我这<br>个人语言有点混乱<br>:one:，这个领域主要的学习方式不同于你以前的“不会就去问别人&#x2F;翻书”，你要去学习自己使用搜索引<br>擎，搜索其他师傅的帖子等等来解决你的问题，这需要你使用一些合适的搜索引擎（必应&#x2F;谷歌），同<br>时掌握一定的搜索方法，搜不到先去改一改关键词，改一改引擎<br>:two:，循序渐进，学一点东西就立刻动手实践，而不是攒一大堆知识之后才开始做题，这样通常会得到<br>一个不怎么样的结果就是你需要反复递归回来看以前的知识，同时你可能也会对它失去兴趣，我个人还<br>是觉得升一级就去打一级的怪对于这个领域而言更加合适也更加让自己有满足感，当然后续知识点复杂<br>的话可能也会出现第二个知识点卡住导致你第一个知识点的掌握也变得不那么牢靠的情况<br>:three:，广撒网，在技术方面的学习中途径非常多，书籍，大佬的blog以及各种有用的网站都是你的目<br>标，多看多汇总对你的学习还是有很大帮助的，甚至你都可以去询问一下万能的AI..<br>:four:，找一些好的题库网站且积极寻找适合你自己水平的比赛，以刷各种题来练习来提升自己的水<br>平，在pwn中，即使是同一个知识点也能在不同的师傅手中发挥出不同的姿势，同时知识点的本质是不<br>变的，所以刷题练习可以让你一边学到各种利用手段一边加深对某一点的理解<br>:five:，如果遇到了自己很难解决的情况或者是找不到方向了这种自己难以解决的困难，向学长&#x2F;资深师<br>傅提问也是一个不错的方法，但是提问之前建议先去看看《提问的智慧》，掌握友好且高效的提问方式<br>pwn方向的几位管理都是非常友好的，遇到问题的话欢迎各位新生朋友来找我们提问<br>到这里，大伙已经可以着手去准备自己的基础知识且开始跟随着我们在moe中设置的梯度开始做题享受CTF的<br>美好了，如果读到这里的你对pwn还是持有一些好奇和激情，想要步入这条道路的话，我更想看到你带着这份<br>激情与你的觉悟去向我们在moe中的题目不断坚持发起挑战:heart:<br>好像结尾写成了励志文章，感觉和这样子的硬核安全比赛的一篇入门文章不是很搭，但是如果我把一个指北单<br>纯的写成一个描述任务或者描述方向的文章，那估计这种语气的指北萌新朋友看了就扔，效果会更差，也更劝<br>退，单纯描述任务什么的可能只需要几句话，各种知识与步骤网上也有许多师傅写过了，我这种菜鸡不如说点<br>自己的话循循善诱一下<br>虽然开头很不正经，但是结尾我希望用一种正经的方式结束，用《进击的巨人》中希斯特利亚摔针的一首<br>《Zero Eclipse》中的一句歌词来说，歌挺好听的，大伙甚至可以试试：<br>“Make a promise that I cannot regret”<br>flag：moectf{M4ke_A_Promi5e_7hat_1_C4nn0t_Re9ret}<br>希望看到这里的新生萌新朋友们，不管是对这个方向有没有兴趣，想来学pwn或是想学别的方向或是别的东<br>西，或者是什么大佬学长出于好奇想来看看这个指北里有什么东西，我希望都请“许下一个不会后悔的诺言”，<br>找到自己的方向，玩得开心，学得开心，同时祝各位能够取得成功–<br>最后，欢迎大家来到pwn的领域。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/18/pwn/"/>
    <url>/2024/04/18/pwn/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
